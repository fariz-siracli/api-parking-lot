buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'checkstyle'

sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

task smokeTest(type: Test, description: 'Runs Smoke Tests.') {
    testClassesDirs = project.sourceSets.smokeTest.output.classesDirs
    classpath = project.sourceSets.smokeTest.runtimeClasspath
}

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.ws:spring-ws:3.0.9.RELEASE"
    implementation "org.springframework:spring-core:5.2.6.RELEASE"
    implementation "org.springframework.ws:spring-ws-core:3.0.9.RELEASE"
    implementation "org.springframework:spring-aop:5.0.1.RELEASE"

    implementation "org.hibernate:hibernate-validator:5.3.5.Final"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.liquibase:liquibase-maven-plugin:3.4.1"
    runtimeOnly("com.h2database:h2")
    implementation "org.springframework:spring-test:5.2.6.RELEASE"

    // auto generation
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    annotationProcessor('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.2.0.Final')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.spockframework:spock-spring:2.0-M4-groovy-3.0')
}

checkstyle {
    toolVersion '8.14'
}

jar {
    enabled = true
    archiveName = "${project.name}-light.jar"
}

bootJar {
    archiveName = "${project.name}.jar"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport